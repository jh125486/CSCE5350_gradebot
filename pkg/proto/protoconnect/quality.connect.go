// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pkg/proto/quality.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/jh125486/CSCE5350_gradebot/pkg/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// QualityServiceName is the fully-qualified name of the QualityService service.
	QualityServiceName = "quality.QualityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QualityServiceEvaluateCodeQualityProcedure is the fully-qualified name of the QualityService's
	// EvaluateCodeQuality RPC.
	QualityServiceEvaluateCodeQualityProcedure = "/quality.QualityService/EvaluateCodeQuality"
)

// QualityServiceClient is a client for the quality.QualityService service.
type QualityServiceClient interface {
	EvaluateCodeQuality(context.Context, *connect_go.Request[proto.EvaluateCodeQualityRequest]) (*connect_go.Response[proto.EvaluateCodeQualityResponse], error)
}

// NewQualityServiceClient constructs a client for the quality.QualityService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQualityServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) QualityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &qualityServiceClient{
		evaluateCodeQuality: connect_go.NewClient[proto.EvaluateCodeQualityRequest, proto.EvaluateCodeQualityResponse](
			httpClient,
			baseURL+QualityServiceEvaluateCodeQualityProcedure,
			opts...,
		),
	}
}

// qualityServiceClient implements QualityServiceClient.
type qualityServiceClient struct {
	evaluateCodeQuality *connect_go.Client[proto.EvaluateCodeQualityRequest, proto.EvaluateCodeQualityResponse]
}

// EvaluateCodeQuality calls quality.QualityService.EvaluateCodeQuality.
func (c *qualityServiceClient) EvaluateCodeQuality(ctx context.Context, req *connect_go.Request[proto.EvaluateCodeQualityRequest]) (*connect_go.Response[proto.EvaluateCodeQualityResponse], error) {
	return c.evaluateCodeQuality.CallUnary(ctx, req)
}

// QualityServiceHandler is an implementation of the quality.QualityService service.
type QualityServiceHandler interface {
	EvaluateCodeQuality(context.Context, *connect_go.Request[proto.EvaluateCodeQualityRequest]) (*connect_go.Response[proto.EvaluateCodeQualityResponse], error)
}

// NewQualityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQualityServiceHandler(svc QualityServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	qualityServiceEvaluateCodeQualityHandler := connect_go.NewUnaryHandler(
		QualityServiceEvaluateCodeQualityProcedure,
		svc.EvaluateCodeQuality,
		opts...,
	)
	return "/quality.QualityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QualityServiceEvaluateCodeQualityProcedure:
			qualityServiceEvaluateCodeQualityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQualityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQualityServiceHandler struct{}

func (UnimplementedQualityServiceHandler) EvaluateCodeQuality(context.Context, *connect_go.Request[proto.EvaluateCodeQualityRequest]) (*connect_go.Response[proto.EvaluateCodeQualityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("quality.QualityService.EvaluateCodeQuality is not implemented"))
}
